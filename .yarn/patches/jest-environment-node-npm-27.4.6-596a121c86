diff --git a/build/index.js b/build/index.js
index 41401febe67c3430ef9899d7624661e77c38c342..96373735aad753e8bf9f55e00b4b3d263b3e607e 100644
--- a/build/index.js
+++ b/build/index.js
@@ -1,7 +1,7 @@
-'use strict';
+"use strict";
 
 function _vm() {
-  const data = require('vm');
+  const data = require("vm");
 
   _vm = function () {
     return data;
@@ -11,7 +11,7 @@ function _vm() {
 }
 
 function _fakeTimers() {
-  const data = require('@jest/fake-timers');
+  const data = require("@jest/fake-timers");
 
   _fakeTimers = function () {
     return data;
@@ -21,7 +21,7 @@ function _fakeTimers() {
 }
 
 function _jestMock() {
-  const data = require('jest-mock');
+  const data = require("jest-mock");
 
   _jestMock = function () {
     return data;
@@ -31,7 +31,7 @@ function _jestMock() {
 }
 
 function _jestUtil() {
-  const data = require('jest-util');
+  const data = require("jest-util");
 
   _jestUtil = function () {
     return data;
@@ -46,7 +46,7 @@ function _defineProperty(obj, key, value) {
       value: value,
       enumerable: true,
       configurable: true,
-      writable: true
+      writable: true,
     });
   } else {
     obj[key] = value;
@@ -56,22 +56,24 @@ function _defineProperty(obj, key, value) {
 
 class NodeEnvironment {
   constructor(config) {
-    _defineProperty(this, 'context', void 0);
+    _defineProperty(this, "context", void 0);
 
-    _defineProperty(this, 'fakeTimers', void 0);
+    _defineProperty(this, "fakeTimers", void 0);
 
-    _defineProperty(this, 'fakeTimersModern', void 0);
+    _defineProperty(this, "fakeTimersModern", void 0);
 
-    _defineProperty(this, 'global', void 0);
+    _defineProperty(this, "global", void 0);
 
-    _defineProperty(this, 'moduleMocker', void 0);
+    _defineProperty(this, "moduleMocker", void 0);
 
     this.context = (0, _vm().createContext)();
     const global = (this.global = (0, _vm().runInContext)(
-      'this',
+      "this",
       Object.assign(this.context, config.testEnvironmentOptions)
     ));
     global.global = global;
+    global.atob = atob;
+    global.btoa = btoa;
     global.clearInterval = clearInterval;
     global.clearTimeout = clearTimeout;
     global.setInterval = setInterval;
@@ -85,47 +87,47 @@ class NodeEnvironment {
 
     global.Uint8Array = Uint8Array; // URL and URLSearchParams are global in Node >= 10
 
-    if (typeof URL !== 'undefined' && typeof URLSearchParams !== 'undefined') {
+    if (typeof URL !== "undefined" && typeof URLSearchParams !== "undefined") {
       global.URL = URL;
       global.URLSearchParams = URLSearchParams;
     } // TextDecoder and TextDecoder are global in Node >= 11
 
     if (
-      typeof TextEncoder !== 'undefined' &&
-      typeof TextDecoder !== 'undefined'
+      typeof TextEncoder !== "undefined" &&
+      typeof TextDecoder !== "undefined"
     ) {
       global.TextEncoder = TextEncoder;
       global.TextDecoder = TextDecoder;
     } // queueMicrotask is global in Node >= 11
 
-    if (typeof queueMicrotask !== 'undefined') {
+    if (typeof queueMicrotask !== "undefined") {
       global.queueMicrotask = queueMicrotask;
     } // AbortController is global in Node >= 15
 
-    if (typeof AbortController !== 'undefined') {
+    if (typeof AbortController !== "undefined") {
       global.AbortController = AbortController;
     } // AbortSignal is global in Node >= 15
 
-    if (typeof AbortSignal !== 'undefined') {
+    if (typeof AbortSignal !== "undefined") {
       global.AbortSignal = AbortSignal;
     } // Event is global in Node >= 15.4
 
-    if (typeof Event !== 'undefined') {
+    if (typeof Event !== "undefined") {
       global.Event = Event;
     } // EventTarget is global in Node >= 15.4
 
-    if (typeof EventTarget !== 'undefined') {
+    if (typeof EventTarget !== "undefined") {
       global.EventTarget = EventTarget;
     } // performance is global in Node >= 16
 
-    if (typeof performance !== 'undefined') {
+    if (typeof performance !== "undefined") {
       global.performance = performance;
     }
 
     (0, _jestUtil().installCommonGlobals)(global, config.globals);
     this.moduleMocker = new (_jestMock().ModuleMocker)(global);
 
-    const timerIdToRef = id => ({
+    const timerIdToRef = (id) => ({
       id,
 
       ref() {
@@ -134,24 +136,24 @@ class NodeEnvironment {
 
       unref() {
         return this;
-      }
+      },
     });
 
-    const timerRefToId = timer => (timer && timer.id) || undefined;
+    const timerRefToId = (timer) => (timer && timer.id) || undefined;
 
     const timerConfig = {
       idToRef: timerIdToRef,
-      refToId: timerRefToId
+      refToId: timerRefToId,
     };
     this.fakeTimers = new (_fakeTimers().LegacyFakeTimers)({
       config,
       global,
       moduleMocker: this.moduleMocker,
-      timerConfig
+      timerConfig,
     });
     this.fakeTimersModern = new (_fakeTimers().ModernFakeTimers)({
       config,
-      global
+      global,
     });
   }
 
